generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  customers     Customer[]
  workOrders    WorkOrder[]
  inventory     InventoryItem[]
  invoices      Invoice[]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          Role      @default(TECHNICIAN)
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workOrders    WorkOrder[]
}

model Customer {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String
  phone         String
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  vehicles      Vehicle[]
  workOrders    WorkOrder[]
  invoices      Invoice[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Vehicle {
  id            String    @id @default(cuid())
  make          String
  model         String
  year          Int
  vin           String
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  workOrders    WorkOrder[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WorkOrder {
  id            String    @id @default(cuid())
  status        WorkOrderStatus @default(PENDING)
  description   String
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  vehicleId     String
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  technicianId  String
  technician    User      @relation(fields: [technicianId], references: [id])
  tasks         Task[]
  parts         WorkOrderPart[]
  invoice       Invoice?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  status        TaskStatus @default(PENDING)
  workOrderId   String
  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InventoryItem {
  id            String    @id @default(cuid())
  name          String
  sku           String
  cost          Float
  price         Float
  quantity      Int
  minQuantity   Int      @default(5)
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  workOrders    WorkOrderPart[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WorkOrderPart {
  id              String    @id @default(cuid())
  quantity        Int
  workOrderId     String
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id])
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Invoice {
  id            String    @id @default(cuid())
  amount        Float
  status        InvoiceStatus @default(PENDING)
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  workOrderId   String    @unique
  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  TECHNICIAN
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}